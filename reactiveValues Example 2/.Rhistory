shiny::runApp('Desktop/shiny/Satheesh/2')
shiny::runApp('Desktop/shiny/Satheesh/2')
shiny::runApp('Desktop/shiny/Satheesh/2')
shiny::runApp('Desktop/shiny/Satheesh/2')
shiny::runApp('Desktop/shiny/Satheesh/2')
shiny::runApp('Desktop/shiny/Satheesh/2')
shiny::runApp('Desktop/shiny/Satheesh/2')
shiny::runApp('Desktop/shiny/Satheesh/2')
shiny::runApp('Desktop/shiny/Satheesh/2')
shiny::runApp('Desktop/shiny/Satheesh/2')
shiny::runApp('Desktop/shiny/Satheesh/2')
shiny::runApp('Desktop/shiny/Satheesh/2')
shiny::runApp('Desktop/shiny/Satheesh/2')
shiny::runApp('Desktop/shiny/Satheesh/2')
shiny::runApp('Desktop/shiny/Satheesh/2')
shiny::runApp('Desktop/shiny/Satheesh/2')
shiny::runApp('Desktop/shiny/Satheesh/2')
shiny::runApp('Desktop/shiny/Satheesh/2')
shiny::runApp('Desktop/shiny/Satheesh/2')
shiny::runApp('Desktop/shiny/Satheesh/2')
shiny::runApp('Desktop/shiny/Satheesh/2')
shiny::runApp('Desktop/shiny/Satheesh/2')
shiny::runApp('Desktop/shiny/Satheesh/2')
shiny::runApp('Desktop/shiny/Satheesh/2')
shiny::runApp('Desktop/test')
shiny::runApp('Desktop/test')
install.packages("pracma")
library(pracma)
shiny::runApp('Desktop/test')
shiny::runApp('Desktop/test2')
shiny::runApp('Desktop/test2')
shiny::runApp('Desktop/test2')
shiny::runApp('Desktop/test2')
shiny::runApp('Desktop/test2')
shiny::runApp('Desktop/test2')
shiny::runApp('Desktop/test2')
shiny::runApp('Desktop/test2')
shiny::runApp('Desktop/test2')
shiny::runApp('Desktop/test2')
shiny::runApp('Desktop/test2')
shiny::runApp('Desktop/test2')
shiny::runGist("https://gist.github.com/aagarw30/bde12c6f2e3de6095b4b2858d6e41802")
shiny::runApp('Desktop/test2')
library(knitr)
t = knitr::kable(iris)
t
shiny::runApp('Desktop/test2')
shiny::runApp('Desktop/test2')
shiny::runApp('Desktop/test2')
shiny::runApp('Desktop/test2')
shiny::runApp('Desktop/test2')
shiny::runApp('Desktop/test2')
shiny::runApp('Desktop/test2')
shiny::runApp('Desktop/test2')
install.packages("(gridExtra")
shiny::runApp('Desktop/test2')
shiny::runApp('Desktop/test2')
shiny::runApp('Desktop/test3')
options(shiny.reactlog=TRUE)
shiny::runApp('Desktop/test3')
shiny::runApp('Desktop/test3')
showReactLog()
options(gsubfn.engine = "R")
library(sqldf)
data(iris)
sqldf("select * from iris")
sqldf("select * from iris where Species=='setosa'")
sqldf("select DISTINCT(Species) from iris")
class(sqldf("select DISTINCT(Species) from iris"))
typeof(sqldf("select DISTINCT(Species) from iris"))
dataset
data()
data(CO2)
CO2
View(CO2)
data(CO2)
sqldf("select * from CO2 where Plant like 'Qn%'")
runApp(
list(
ui = fluidPage(
titlePanel("Linear Regression"),
sidebarLayout(position = "right",
mainPanel(h2("Your Model"), dataTableOutput("table")),
sidebarPanel(h2("Your Data"),
fileInput("mydata", label = h4("Please upload the .xls, .txt, or.csv file you would like included in the analysis.")),
radioButtons("filetype", label = h4("Please select the type of data uploaded:"), c(".csv", ".txt", ".xls"), selected = ".xls"),
textInput("response", label=h4 ("What is the column name of your response variable?")),
textInput("explan1", label=h4 ("What is the column name of your explanitory variable?")),
actionButton("analysis","Analyze!"),
verbatimTextOutput("modelSummary")
)
)),
server = function(input, output) {
observeEvent( input$analysis, {
model=lm(mpg ~ hp, data = mtcars)
output$modelSummary <- renderPrint({
summary(model)
})
})
}
))
library(shiny)
runApp(
list(
ui = fluidPage(
titlePanel("Linear Regression"),
sidebarLayout(position = "right",
mainPanel(h2("Your Model"), dataTableOutput("table")),
sidebarPanel(h2("Your Data"),
fileInput("mydata", label = h4("Please upload the .xls, .txt, or.csv file you would like included in the analysis.")),
radioButtons("filetype", label = h4("Please select the type of data uploaded:"), c(".csv", ".txt", ".xls"), selected = ".xls"),
textInput("response", label=h4 ("What is the column name of your response variable?")),
textInput("explan1", label=h4 ("What is the column name of your explanitory variable?")),
actionButton("analysis","Analyze!"),
verbatimTextOutput("modelSummary")
)
)),
server = function(input, output) {
observeEvent( input$analysis, {
model=lm(mpg ~ hp, data = mtcars)
output$modelSummary <- renderPrint({
summary(model)
})
})
}
))
library(twitteR)
library(twitteR)
# Assign credentials for twitter api authorization :
consumer_key = 'tmqEyk6e3HkpC8rUQmr6rsWel'
consumer_secret = 't7dm0RcyaMDtwVPoXoRK7pZvT3u86dtg2u6aR9nXPFjsAGwDHa'
access_token = '2599111279-VcbRfiJnVu2dYwUGBFtWhclVDiicI8iJ9lOErMl'
access_secret = 'cFAJqYoIvMDNkJc5mIMobuPXO4PMf8jbFiX3WJPlxiwTp'
# Create Twitter connection & authorize the app :
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
search_string = c(“#demonetization”, “#demonetize”)
tweets_test_list = searchTwitter(search_string)
search_string = c('#demonetization', '#demonetize')
tweets_test_list = searchTwitter(search_string)
length(tweets_test_list)
length(tweets_test_list)
search_string = c("#demonetization", "#demonetize")
tweets_test_list = searchTwitter(search_string)
length(tweets_test_list)
tweets = laply(tweets_test_list, function(x) x$getText())
tweets
library(plyr)
tweets = laply(tweets_test_list, function(x) x$getText())
tweets
?twitteR
?twitteR
??twitteR
install.packages("RPostgreSQL")
library("RPostgreSQL")
con = dbConnect(drv = PostgreSQL(), host = "molly.cybertec.at", port = "2500",
user = "hernan", password = "superstar", dbname = "test")
str(con)
query = "SELECT table_schema,table_name
FROM information_schema.tables
ORDER BY table_schema,table_name;"
dbSendQuery(con, query)
query = "SELECT id < 100, count(*) FROM generate_series(1, 1000) AS id GROUP BY 1"
dbSendQuery(con, query)
dbDisconnect(con)
con = dbConnect(drv = PostgreSQL(), host = "molly.cybertec.at", port = "2500",
user = "hernan", password = "superstar", dbname = "test")
query = "SELECT id < 100,
count(*) FROM generate_series(1, 1000) AS id GROUP BY 1"
dbSendQuery(con, query)
generate_data <- function (c, sql_text) {
rs <- dbSendQuery(c, sql_text)
ret <- fetch(rs, n=-1)
return(ret)
}
generate_data(query)
generate_data(con, query)
?fecth
?fetch()
generate_data(con, query)
query = "SELECT id < 100,
count(*) FROM generate_series(1, 1000) AS id GROUP BY 1"
generate_data <- function(c, sql_text)
{
rs <- dbSendQuery(c, sql_text)
ret <- fetch(rs, n=-1)
return(ret)
}
generate_data(con, query)
generate_data <- function(c, sql_text)
{
rs <- dbSendQuery(c, sql_text)
ret <- fetch(rs)
return(ret)
}
generate_data(con, query)
outquery = dbSendQuery(con, query)
dbClearResult(outquery)
outquery = dbSendQuery(con, query)
dbDisconnect(con)
con = dbConnect(drv = PostgreSQL(), host = "molly.cybertec.at", port = "2500",
user = "hernan", password = "superstar", dbname = "test")
query = "SELECT id < 100,
count(*) FROM generate_series(1, 1000) AS id GROUP BY 1"
dbSendQuery(con, query)
fetch(dbSendQuery(con, query))
dbClearResult(outquery)
dbClearResult(dbSendQuery(con, query))
dbDisconnect(con)
dbListResults(con)
dbClearResult(dbListResults(con[[1]]))
dbClearResult(dbListResults(con))
install.packages("DBI")
library(DBI)
dbSendQuery(con, query)
dbClearResult(dbListResults(con))
fetch(dbSendQuery(con, query))
dbDisconnect(con)
dbClearResult(query)
library("DBI")
dbClearResult(query)
query = "SELECT random(), random()"
dbSendQuery(con, query)
dbSendQuery(con, query)
summary(con)
dbListTables(con)
library(RPostgreSQL)
dbClearResult(query)
query = "SELECT random(), random()"
dbSendQuery(con, query)
con = dbConnect(drv = PostgreSQL(), host = "molly.cybertec.at", port = "2500",
user = "hernan", password = "superstar", dbname = "test")
summary(con)
dbDisconnect(con)
dbListTables(con)
summary(con)
con = dbConnect(drv = PostgreSQL(), host = "molly.cybertec.at", port = "2500",
user = "hernan", password = "superstar", dbname = "test")
summary(con)
dbDisconnect(con)
dbListTables(con)
dbDisconnect(con)
summary(con)
summary(con)
dbDisconnect(con)
con = dbConnect(drv = PostgreSQL(), host = "molly.cybertec.at", port = "2500",
user = "hernan", password = "superstar", dbname = "test")
summary(con)
dbListTables(con)
query = "SELECT random(), random()"
dbSendQuery(con, query)
fetch(dbSendQuery(con, query))
dbClearResult(query)
dbClearResult(dbSendQuery(con, query))
dbClearResult(dbListResults(con))
dbClearResult(dbSendQuery(con, query))
dbListTables(con)
summary(con)
query = "SELECT id < 100,count(*) FROM generate_series(1, 1000) AS id GROUP BY 1;"
dbSendQuery(con, query)
fetch(dbSendQuery(con, query))
shiny::runApp('Desktop/postgres/builder')
shiny::runApp('Desktop/postgres/builder')
shiny::runApp('Desktop/postgres/builder')
shiny::runApp('Desktop/postgres/builder')
shiny::runApp('Desktop/postgres/builder')
shiny::runApp('Desktop/postgres/builder')
shiny::runApp('Desktop/postgres/builder')
shiny::runApp('Desktop/postgres/builder')
shiny::runApp('Desktop/postgres/builder')
shiny::runApp('Desktop/postgres/builder')
shiny::runApp('Desktop/postgres/builder')
shiny::runApp('Desktop/postgres/builder')
shiny::runApp('Desktop/postgres/builder')
shiny::runApp('Desktop/postgres/builder')
shiny::runApp('Desktop/postgres/builder')
shiny::runApp('Desktop/postgres/builder')
shiny::runApp('Desktop/postgres/builder')
shiny::runApp('Desktop/postgres/builder')
shiny::runApp('Desktop/postgres/builder')
shiny::runApp('Desktop/postgres/builder')
shiny::runApp('Desktop/postgres/builder')
shiny::runApp('Desktop/LifeTimeSuper')
shiny::runApp('Desktop/LifeTimeSuper')
shiny::runApp('Desktop/LifeTimeSuper')
shiny::runApp('Desktop/LifeTimeSuper')
shiny::runApp('Desktop/LifeTimeSuper')
shiny::runApp('Desktop/LifeTimeSuper')
shiny::runApp('Desktop/postgres/builder')
shiny::runApp('Desktop/postgres/builder')
shiny::runApp('Desktop/postgres/builder')
dbDisconnect(con)
con = dbConnect(drv = PostgreSQL(), host = "molly.cybertec.at", port = "2500",
user = "hernan", password = "superstar", dbname = "test")
result = dbSendQuery(con, "SELECT id < 100,count(*) FROM generate_series(1, 1000) AS id GROUP BY 1")
class(result)
class(fetch(result))
fetch(result)
dbClearResult(result)
result = dbSendQuery(con, "SELECT id < 100,count(*) FROM generate_series(1, 1000) AS id GROUP BY 1")
fetch(result)
dbClearResult(result)
dbDisconnect(con)
summary(con)
summary(con)
shiny::runApp('Desktop/postgres/builder')
shiny::runApp('Desktop/postgres/builder')
shiny::runApp('Desktop/postgres/builder')
getwd()
shiny::runApp('Desktop/postgres/builder')
shiny::runApp('Desktop/postgres/builder/2')
shiny::runApp('Desktop/postgres/builder/2')
shiny::runApp('Desktop/postgres/builder/2')
shiny::runApp('Desktop/postgres/builder/2')
shiny::runApp('Desktop/postgres/builder/2')
shiny::runApp('Desktop/postgres/builder/2')
shiny::runApp('Desktop/postgres/builder/2')
shiny::runApp('Desktop/postgres/builder/2')
shiny::runApp('Desktop/postgres/builder/2')
shiny::runApp('Desktop/postgres/builder/2')
shiny::runApp('Desktop/postgres/builder/2')
shiny::runApp('Desktop/postgres/builder/2')
shiny::runApp('Desktop/postgres/builder/2')
shiny::runApp('Desktop/postgres/builder/2')
install.packages("shinyjs")
library(shinyjs)
install.packages("shinyjs")
install.packages("shinyjs")
install.packages("shinyjs")
install.packages("shinyjs")
install.packages("shinyjs")
library(shinyjs)
install.packages("shiny")
library(shiny)
install.packages("shiny")
library(shiny)
sessioninfo()
sessionInfo()
library(shiny)
install.packages
install.packages("shiny")
install.packages("sourcetools")
install.packages("sourcetools")
library(shinydashboard)
ls()
library(ggplot2)
library(shiny)
install.packages('shiny', dependencies = TRUE)
library(shiny)
install.packages(shiny)
install.packages("shiny")
ls()
install.packages("shiny")
install.packages('shiny', repos='http://cran.rstudio.com/')
install.packages('sourcetools', repos='http://cran.rstudio.com/')
install.packages('sourcetools', repos='http://cran.rstudio.com/')
sessionInfo()
install.packages("shiny")
shiny::runApp('Desktop/postgres/builder/2')
shiny::runApp('Desktop/postgres/builder/2')
runApp('Desktop/postgres/builder/2')
runApp('Desktop/postgres/builder/2')
runApp('Desktop/postgres/builder/2')
mtcars
str(mtcars)
is.factor(mtcars$am)
class(mtcars$am)
attributes(mtcars$am)
typeof(mtcars$am)
levels(mtcars$am)
hist(mtcars$am)
barplot(mtcars$cyl)
table(mtcars$am)
barplot(table(mtcars$am))
sapply(mtcars, class)
apply(mtcars, 2 , class)
?barplot
barplot(mtcars$cyl)
barplot(table(mtcars$cyl))
hist(mtcars$mpg)
shiny::runApp('Desktop/postgres/builder/2')
runApp('Desktop/postgres/builder/2')
runApp('Desktop/postgres/builder/2')
shiny::runApp('Desktop/Project Cybertech/builder')
runApp('Desktop/Project Cybertech/builder')
runApp('Desktop/Project Cybertech/builder/Graphs')
runApp('Desktop/Project Cybertech/builder/Graphs')
runApp('Desktop/Project Cybertech/builder/Graphs')
runApp('Desktop/Project Cybertech/builder/Graphs')
runApp('Desktop/Project Cybertech/builder/Graphs')
runApp('Desktop/Project Cybertech/builder/Graphs')
runApp('Desktop/Project Cybertech/builder/Graphs')
View(nottem)
View(UKDriverDeaths )
str(
UKDriverDeaths )
runApp('Desktop/Project Cybertech/builder/Graphs')
runApp('Desktop/Project Cybertech/builder/Graphs')
runApp('Desktop/Project Cybertech/builder/Graphs')
str(AirPassengers)
head(AirPassengers)
runApp('Desktop/Project Cybertech/builder/Graphs')
runApp('Desktop/Project Cybertech/builder/Graphs')
runApp('Desktop/Project Cybertech/builder/Graphs')
runApp('Desktop/Project Cybertech/builder/Graphs')
runApp('Desktop/Project Cybertech/builder/Graphs')
runApp('Desktop/postgres/builder/2')
runApp('Desktop/Project Cybertech/builder')
runApp('Desktop/Project Cybertech/builder')
runApp('Desktop/Project Cybertech/builder')
runApp('Desktop/Project Cybertech/builder')
runApp('Desktop/Project Cybertech/builder')
runApp('Desktop/Project Cybertech/builder')
runApp('Desktop/Project Cybertech/builder')
runApp('Desktop/Project Cybertech/builder')
runApp('Desktop/Project Cybertech/builder')
runApp('Desktop/Project Cybertech/builder')
runApp('Desktop/Project Cybertech/builder')
runApp('Desktop/Project Cybertech/builder')
runApp('Desktop/Project Cybertech/builder')
runApp('Desktop/Project Cybertech/builder')
runApp('Desktop/Project Cybertech/builder')
runApp('Desktop/Project Cybertech/builder')
runApp('Desktop/Project Cybertech/builder')
runApp('Desktop/Project Cybertech/builder')
runApp('Desktop/Project Cybertech/builder')
runApp('Desktop/Project Cybertech/builder')
runApp('Desktop/Project Cybertech/builder')
library(plotly)
p <- plot_ly(midwest, x = ~percollege, color = ~state, type = "box")
p
config(p, displayModeBar=FALSE)
runApp('Desktop/Chart button/testplotly')
runApp('Desktop/Chart button/testplotly')
runApp('Desktop/Chart button/testplotly')
runApp('Desktop/Chart button/testplotly')
str(mtcars)
runApp('Desktop/Chart button/testplotly')
runApp('Desktop/Chart button/testplotly')
runApp('Desktop/Project Cybertech/builder')
runApp('Desktop/Project Cybertech/builder')
runApp('Desktop/Project Cybertech/builder')
runApp('Desktop/Project Cybertech/builder')
runApp('Desktop/Project Cybertech/builder')
runApp('Desktop/Project Cybertech/builder')
runApp('Desktop/Project Cybertech/builder')
runApp('Desktop/Project Cybertech/builder')
runApp('Desktop/Project Cybertech/builder')
shiny::runApp('Desktop/Project Cybertech/builder')
?plot_ly
runApp('Desktop/Project Cybertech/builder')
runApp('Desktop/Project Cybertech/builder')
runApp('Desktop/Project Cybertech/builder')
runApp('Desktop/Project Cybertech/builder')
runApp('Desktop/Project Cybertech/builder')
runApp('Desktop/Project Cybertech/builder')
runApp('Desktop/Project Cybertech/builder')
runApp('Desktop/Project Cybertech/builder')
runApp('Desktop/Project Cybertech/builder')
runApp('Desktop/Project Cybertech/builder')
runApp('Desktop/Project Cybertech/builder')
runApp('Desktop/Project Cybertech/builder')
runApp('Desktop/Project Cybertech/builder')
runApp('Desktop/Project Cybertech/builder')
runApp('Desktop/Project Cybertech/builder')
runApp('Desktop/Project Cybertech/builder')
runApp('Desktop/Project Cybertech/builder')
runApp('Desktop/Project Cybertech/builder')
runApp('Desktop/Project Cybertech/builder')
shiny::runApp('Desktop/Project Cybertech/builder')
shiny::runApp('Desktop/Project Cybertech/builder')
shiny::runApp('Desktop/Project Cybertech/builder')
runApp('Desktop/Project Cybertech/builder')
shiny::runApp('Desktop/graph to PDF')
runApp('Desktop/graph to PDF')
install.package("gridExtra")
install.packages("gridExtra")
runApp('Desktop/graph to PDF')
runApp('Desktop/graph to PDF')
runApp('Desktop/graph to PDF')
runApp('Desktop/graph to PDF')
runApp('Desktop/graph to PDF')
runApp('Desktop/graph to PDF')
help("layout")
runApp('Desktop/graph to PDF')
runApp('Desktop/graph to PDF')
runApp('Desktop/graph to PDF')
runApp('Desktop/graph to PDF')
runApp('Desktop/graph to PDF')
runApp('Desktop/graph to PDF')
runApp('Desktop/graph to PDF')
runApp('Desktop/graph to PDF')
runApp('Desktop/graph to PDF')
runApp('Desktop/graph to PDF')
runApp('Desktop/graph to PDF')
runApp('Desktop/graph to PDF')
runApp('Desktop/graph to PDF')
runApp('Desktop/graph to PDF')
runApp('Desktop/graph to PDF')
runApp('Desktop/graph to PDF')
runApp('Desktop/graph to PDF')
runApp('Desktop/graph to PDF')
runApp('Desktop/graph to PDF')
runApp('Desktop/graph to PDF')
runApp('Desktop/graph to PDF')
setwd("~/Desktop/MyShinyGitHub/R-Shinyapp-Tutorial/reactiveValues Example 1")
getwd()
ls
list.files()
shiny::runApp()
setwd("~/Desktop/MyShinyGitHub/R-Shinyapp-Tutorial/reactiveValues Example 2")
getwd()
runApp()
