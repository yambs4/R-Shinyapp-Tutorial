sessionInfo()
ls()
ls.str()
ls.str
ls.packages()
packages(ls())
ls(installed.packages())
installed.packages()
ip <- as.data.frame(installed.packages()[,c(1,3:4)])
rownames(ip) <- NULL
ip <- ip[is.na(ip$Priority),1:2,drop=FALSE]
print(ip, row.names=FALSE)
str(installed.packages())
?install.packages
?installed.packages
.libPaths()
install.packages("shiny")
installed.packages()
sessionInfo()
ls()
ls(packages())
ls(installed.packages())
installed.packages()
str(installed.packages())
typeof(installed.packages())
installed.packages()[,1]
list.files()
getwd()
list.files()
clear()
sessionInfo()
shiny::runApp('C:/Users/Abhinav/Desktop/test')
clear()
x <- installed.packages(); x[ is.na(x[,"Priority"]), c("Package", "Version")]
installed.packages()
str(installed.packages)
str(installed.packages())
names(installed.packages())
dimnames(installed.packages())
x <- installed.packages()
x[,c("Package", "Verion")]
colnames(x)
x[, c("Package", "Version")]
x[, c("Package", "Version"), `row.names<- FALSE]
x[, c("Package", "Version"), rownames<- FALSE]
x[, c("Package", "Version")]
colnames(x)
library(shiny)
runApp(
list(
ui = fluidPage(
pageWithSidebar(
headerPanel("Adding entries to table"),
sidebarPanel(
numericInput("num2", "Column 2", value = 0),
actionButton("update", "Update Table")),
mainPanel(tableOutput("table1")))
),
server = function(input, output, session) {
values <- reactiveValues(
dm = data.frame(Date = as.Date(c("2015-05-10", "2015-10-07", "2015-03-26","2015-07-18")),
Col2 = c(160, 150, 121, 93))
)
addData <- observeEvent(input$update, {
values$dm <- isolate({
newLine <- data.frame(Date = format(Sys.time(), "%Y-%m-%d"),
Col2 = tail(values$dm$Col2, n=1) - 4)
rbind(values$dm,newLine)
})
})
output$table1 <- renderTable({
values$dm
})
}
)
)
shiny::runApp('C:/Users/Abhinav/Desktop/Projects/Windu')
runApp('C:/Users/Abhinav/Desktop/Projects/Windu')
runApp('C:/Users/Abhinav/Desktop/Projects/Windu')
runApp('C:/Users/Abhinav/Desktop/Projects/Windu')
runApp('C:/Users/Abhinav/Desktop/Projects/Windu')
runApp('C:/Users/Abhinav/Desktop/Projects/Windu')
runApp('C:/Users/Abhinav/Desktop/Projects/Windu')
runApp('C:/Users/Abhinav/Desktop/Projects/Windu')
library(shiny)
runGist("https://gist.github.com/mine-cetinkaya-rundel/eb3470beb1c0252bd0289cbc89bcf36f")
sessionInfo()
ip <- as.data.frame(installed.packages()[,c(1,3:4)])
rownames(ip) <- NULL
ip <- ip[is.na(ip$Priority),1:2,drop=FALSE]
print(ip, row.names=FALSE)
remove.packages("rsconnect")
sessionInfo()
library(rsconnect)
sessionInfo()
str(mtcars)
head(mtcars)
library(plotly)
plot_ly(data=mtcars,
x=~mpg,
type="histogram")
plot_ly(data=mtcars,
x=~mpg,
type="histogram") %>% layout(bargap=0.1)
plot_ly(data=mtcars,
x=~mpg,
type="histogram")
# With gaps between the Bar
plot_ly(data=mtcars,
x=~mpg,
type="histogram") %>% layout(bargap=0.1)
# Add a line to the histogram at the mean
plot_ly(data=mtcars,
x=~mpg,
type="histogram") %>%
add_trace(y=mean(mpg))
# Add a line to the histogram at the mean
plot_ly(data=mtcars,
x=~mpg,
type="histogram") %>%
add_lines(y=mean(mpg))
# Add a line to the histogram at the mean
plot_ly(data=mtcars,
x=~mpg,
type="histogram") %>%
add_lines(y=mean(mpg), type="line")
# Add a line to the histogram at the mean
plot_ly(data=mtcars,
x=~mpg,
type="histogram") %>%
add_trace(y=mean(mpg), type="line")
plot_ly(data=mtcars,
x=~mpg,
type="histogram")
# With gaps between the Bar
plot_ly(data=mtcars,
x=~mpg,
type="histogram") %>% layout(bargap=0.1)
# With gaps between the Bar
plot_ly(data=mtcars,
x=~mpg,
type="histogram") %>% layout(bargap=0.3)
# With gaps between the Bar
plot_ly(data=mtcars,
x=~mpg,
type="histogram") %>% layout(bargap=0.1)
# Playing with BINs
plot_ly(data=mtcars,
x=~mpg,
type="histogram",
nbinsx = 20
)
# Playing with BINs
plot_ly(data=mtcars,
x=~mpg,
type="histogram",
nbinsx = 30
)
# Playing with BINs
plot_ly(data=mtcars,
x=~mpg,
type="histogram",
nbinsx = 10
)
# Playing with BINs - define the no. of bins using nbinsx argument
plot_ly(data=mtcars,
x=~mpg,
type="histogram",
nbinsx = 20
)
summary(mtcars$mpg)
# Playing with BINs - define the start, end points and bin width using xbins argument
plot_ly(data=mtcars,
x=~mpg,
type="histogram",
xbins = list(start=10, end=35, size=(35-10)/20)
)
(35-10)/20
# Playing with BINs - define the start, end points and bin width using xbins argument
plot_ly(data=mtcars,
x=~mpg,
type="histogram",
xbins = list(start=10, end=35, size=1.5)
)
# Playing with BINs - define the start, end points and bin width using xbins argument
plot_ly(data=mtcars,
x=~mpg,
type="histogram",
xbins = list(start=10, end=35, size=2)
)
25/2
25/1.5
25/2.5
# Playing with BINs - define the start, end points and bin width using xbins argument
plot_ly(data=mtcars,
x=~mpg,
type="histogram",
xbins = list(start=10, end=35, size=2.5)
)
# Playing with BINs - define the no. of bins using nbinsx argument
plot_ly(data=mtcars,
x=~mpg,
type="histogram",
nbinsx = 10
)
(33.9-10.4)/2.5
(33.9-10.4)/2
(33.9-10.4)/2.25
(33.9-10.4)/2.35
# Playing with BINs - define the start, end points and bin width using xbins argument
plot_ly(data=mtcars,
x=~mpg,
type="histogram",
xbins = list(start=10.4, end=33.9, size=2.35)
)
# Playing with BINs - define the no. of bins using nbinsx argument
plot_ly(data=mtcars,
x=~mpg,
type="histogram",
nbinsx = 10
)
(33.9-10.4)/2.5
(33.9-10.4)/2
# Playing with BINs - define the start, end points and bin width using xbins argument
plot_ly(data=mtcars,
x=~mpg,
type="histogram",
xbins = list(start=10.4, end=33.9, size=2.35)
)
# Playing with BINs - define the start, end points and bin width using xbins argument
plot_ly(data=mtcars,
x=~mpg,
type="histogram",
autobinx = FALSE,
xbins = list(start=10.4, end=33.9, size=2.35)
)
library(plotly)
plot_ly(data=mtcars,
x=~mpg,
type="histogram")
plot_ly(data=mtcars,
x=~mpg,
type="histogram") %>%
add_trace(x=mean(mpg), y=0, type="line")
# Add a line to the histogram at the mean position
plot_ly(data=mtcars,
x=~mpg,
type="histogram") %>%
add_line(x=mean(mpg))
# Add a line to the histogram at the mean position
plot_ly(data=mtcars,
x=~mpg,
type="histogram") %>%
add_lines(x=mean(mpg), y=0)
?add_liness
?add_lines
# Add a line to the histogram at the mean position
plot_ly(data=mtcars,
x=~mpg,
type="histogram") %>%
add_lines(x=mean(mtcars$mpg), y=0)
# Add a line to the histogram at the mean position
plot_ly(data=mtcars,
x=~mpg,
type="histogram") %>%
add_lines(x=mean(mtcars$mpg), y=0, color=I(grey))
# Add a line to the histogram at the mean position
plot_ly(data=mtcars,
x=~mpg,
type="histogram") %>%
add_lines(x=mean(mtcars$mpg), y=c(0,15), color=I(grey))
# Add a line to the histogram at the mean position
plot_ly(data=mtcars,
x=~mpg,
type="histogram") %>%
add_lines(x=c(mean(mtcars$mpg)), y=c(0,15), color=I(grey))
# Add a line to the histogram at the mean position
plot_ly(data=mtcars,
x=~mpg,
type="histogram") %>%
add_lines(x=c(mean(mtcars$mpg)), y=c(0,15), color=I("grey"), alpha=0.8)
# Add a line to the histogram at the mean position
plot_ly(data=mtcars,
x=~mpg,
type="histogram") %>%
add_lines(x=c(mean(mtcars$mpg)),
y=c(0,15),
color=I("grey"),
alpha=0.8,
showlegend=F)
plot_ly(data=mtcars,
x=~mpg,
type="histogram") %>%
add_lines(x=mean(mtcars$mpg),
y=15,
color=I("grey"),
alpha=0.8,
showlegend=F)
plot_ly(data=mtcars,
x=~mpg,
type="histogram") %>%
add_lines(x=mean(mtcars$mpg)),
y=c(0,15),
color=I("grey"),
alpha=0.8,
showlegend=F)
plot_ly(data=mtcars,
x=~mpg,
type="histogram") %>%
add_lines(x=mean(mtcars$mpg),
y=c(0,15),
color=I("grey"),
alpha=0.8,
showlegend=F)
plot_ly(data=mtcars,
x=~mpg,
type="histogram") %>%
add_lines(x=mean(mtcars$mpg),
y=c(0,max(mtcars$wt)),
color=I("grey"),
alpha=0.8,
showlegend=F)
plot_ly(data=mtcars,
x=~mpg,
type="histogram") %>%
add_lines(x=mean(mtcars$mpg),
y=c(0,15),
color=I("grey"),
alpha=0.8,
showlegend=F)
plot_ly(data=mtcars,
x=~mpg,
type="histogram") %>%
add_lines(x=mean(mtcars$mpg),
y=c(0,15),
color=I("grey"),
showlegend=F)
# Add a line to the histogram at the mean position
plot_ly(data=mtcars,
x=~mpg,
type="histogram") %>%
add_lines(x=c(mean(mtcars$mpg)),
y=c(0,15),
color=I("brown"),
alpha=0.8,
showlegend=F)
# Add a line to the histogram at the mean position
plot_ly(data=mtcars,
x=~mpg,
type="histogram") %>%
add_lines(x=c(mean(mtcars$mpg)),
y=c(0,15),
color=I("yellow"),
alpha=0.8,
showlegend=F)
# Add a line to the histogram at the mean position
plot_ly(data=mtcars,
x=~mpg,
type="histogram") %>%
add_lines(x=c(mean(mtcars$mpg)),
y=c(0,15),
color=I("red"),
alpha=0.8,
showlegend=F)
plot_ly(data=mtcars,
x=~mpg,
type="histogram") %>%
layout(shapes=list(x=mean(mtcars$mpg),
y=c(0,15),
color=I("grey"),
showlegend=F))
plotly_example("rmd")
plotly_example("shiny")
plotly_example()
demo(package = "plotly")
plotly_example("animation-tour-USArrests")
plotly_example(animation-tour-USArrests)
getwd()
setwd("C:/Users/Abhinav/Desktop/shinylayouts/navlistpanel demo")
getwd()
list.files9
list.files()
file.edit()
file.edit(c("server.R", "ui.R"))
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('C:/Users/Abhinav/Desktop/Prasun/dynamic7.R')
runGist("https://gist.github.com/aagarw30/4ee5c09c3075c06fa8087cec951adb97")
runGist("https://gist.github.com/aagarw30/4ee5c09c3075c06fa8087cec951adb97")
runGist("https://gist.github.com/aagarw30/4ee5c09c3075c06fa8087cec951adb97")
runGist("https://gist.github.com/aagarw30/4ee5c09c3075c06fa8087cec951adb97")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
getwd()
source('demo1.R')
source('demo1.R')
runApp('demo1.R')
runApp('demo2.R')
runApp()
runApp()
runApp()
runApp('demo2.R')
runApp('demo2.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runGist("https://gist.github.com/aagarw30/f475e88be226b395de9c8997c4991f1d")
runGist("https://gist.github.com/aagarw30/defc8576ab5d572ba2c4275706360ece")
